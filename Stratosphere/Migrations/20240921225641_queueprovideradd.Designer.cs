// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stratosphere.Data;

#nullable disable

namespace Stratosphere.Migrations
{
    [DbContext(typeof(StratosphereContext))]
    [Migration("20240921225641_queueprovideradd")]
    partial class queueprovideradd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnvironmentDtoVirtualHostDto", b =>
                {
                    b.Property<Guid>("EnvironmentsEnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VirtualHostsVirtualHostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnvironmentsEnvironmentId", "VirtualHostsVirtualHostId");

                    b.HasIndex("VirtualHostsVirtualHostId");

                    b.ToTable("EnvironmentDtoVirtualHostDto");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AlarmDto", b =>
                {
                    b.Property<Guid?>("AlarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalReferenceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AlarmId");

                    b.ToTable("Alarm");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AlertHistoryDto", b =>
                {
                    b.Property<Guid?>("AlertHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlertMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("AlertProfileId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AlertTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceHealthReportId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlertHistoryId");

                    b.HasIndex("AlertProfileId");

                    b.HasIndex("AlertTime");

                    b.HasIndex("ServiceHealthReportId");

                    b.ToTable("AlertHistory");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AlertProfileDetailDto", b =>
                {
                    b.Property<Guid?>("AlertProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AlertProfileId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("AlertProfileDetail");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AlertProfileDto", b =>
                {
                    b.Property<Guid?>("AlertProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AlertProfileId");

                    b.ToTable("AlertProfile");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AssetDto", b =>
                {
                    b.Property<Guid?>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConnectionProfileId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AssetId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("ConnectionProfileId");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AssetTypeDto", b =>
                {
                    b.Property<Guid?>("AssetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AssetTypeId");

                    b.ToTable("AssetType");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ConnectionProfileDto", b =>
                {
                    b.Property<Guid?>("ConnectionProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ConnectionProfileId");

                    b.ToTable("ConnectionProfile");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ContactDto", b =>
                {
                    b.Property<Guid?>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ContactTypeDto", b =>
                {
                    b.Property<Guid?>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.EnvironmentDto", b =>
                {
                    b.Property<Guid?>("EnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EnvironmentId");

                    b.ToTable("Environment");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.HealthStatusTypeDto", b =>
                {
                    b.Property<Guid?>("HealthStatusTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("HealthStatusTypeId");

                    b.ToTable("HealthStatusType");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceRequestDetailDto", b =>
                {
                    b.Property<Guid?>("MaintenanceRequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EnvironmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaintenanceRequestId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StartOrder")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("StopOrder")
                        .HasColumnType("int");

                    b.Property<bool>("WaitForQueueClearOnStart")
                        .HasColumnType("bit");

                    b.Property<bool>("WaitForQueueClearOnStop")
                        .HasColumnType("bit");

                    b.HasKey("MaintenanceRequestDetailId");

                    b.HasIndex("AssetId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("MaintenanceRequestId");

                    b.HasIndex("ServiceId");

                    b.ToTable("MaintenanceRequestDetail");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceRequestDetailHistoryDto", b =>
                {
                    b.Property<Guid?>("MaintenanceRequestDetailHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaintenanceRequestDetailId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("MaintenanceRequestDetailHistoryId");

                    b.HasIndex("MaintenanceRequestDetailId");

                    b.ToTable("MaintenanceRequestDetailHistory");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceRequestDto", b =>
                {
                    b.Property<Guid?>("MaintenanceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AutomaticEndEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("AutomaticStartEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("CompletionNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaintenanceRequestId");

                    b.ToTable("MaintenanceRequest");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceTemplateDetailDto", b =>
                {
                    b.Property<Guid?>("MaintenanceTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaintenanceTemplateDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EnvironmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StartOrder")
                        .HasColumnType("int");

                    b.Property<int>("StopOrder")
                        .HasColumnType("int");

                    b.Property<bool>("WaitForQueueClearOnStart")
                        .HasColumnType("bit");

                    b.Property<bool>("WaitForQueueClearOnStop")
                        .HasColumnType("bit");

                    b.HasKey("MaintenanceTemplateId", "MaintenanceTemplateDetailId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("MaintenanceTemplateDetail");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceTemplateDto", b =>
                {
                    b.Property<Guid?>("MaintenanceTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaintenanceTemplateId");

                    b.ToTable("MaintenanceTemplate");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueDto", b =>
                {
                    b.Property<Guid?>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EnvironmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("QueueProviderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VirtualHostId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QueueId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("QueueProviderDetailId");

                    b.HasIndex("VirtualHostId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueProviderDetailDto", b =>
                {
                    b.Property<Guid?>("QueueProviderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QueueProviderId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QueueProviderDetailId");

                    b.HasIndex("QueueProviderId");

                    b.ToTable("QueueProviderDetailDto");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueProviderDto", b =>
                {
                    b.Property<Guid?>("QueueProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConnectionProfileId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QueueProviderId");

                    b.HasIndex("ConnectionProfileId");

                    b.ToTable("QueueProviderDto");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueSnapshotDto", b =>
                {
                    b.Property<Guid?>("QueueSnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageCount")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("QueueId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReadyMessageCount")
                        .HasColumnType("int");

                    b.Property<int>("UnacknowledgedMessageCount")
                        .HasColumnType("int");

                    b.HasKey("QueueSnapshotId");

                    b.HasIndex("QueueId");

                    b.ToTable("QueueSnapshot");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceAlertDto", b =>
                {
                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlertProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId", "AlertProfileId", "EnvironmentId");

                    b.HasIndex("AlertProfileId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("ServiceAlert");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceAssetDto", b =>
                {
                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OverrideName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceId", "AssetId", "EnvironmentId");

                    b.HasIndex("AssetId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("ServiceAsset");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceDto", b =>
                {
                    b.Property<Guid?>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ServiceTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceEnvironmentDetailDto", b =>
                {
                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutomaticRestartEligible")
                        .HasColumnType("bit");

                    b.Property<int>("ConsecutiveFailuresBeforeAlert")
                        .HasColumnType("int");

                    b.Property<int>("ConsecutiveFailuresBeforeRestart")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HealthStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MinimumHealthStatusTypeIdForAction")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId", "EnvironmentId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("HealthStatusTypeId");

                    b.ToTable("ServiceEnvironmentDetail");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceHealthReportDetailDto", b =>
                {
                    b.Property<Guid?>("ServiceHealthReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceHealthReportDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceHealthReportId", "ServiceHealthReportDetailId");

                    b.ToTable("ServiceHealthReportDetail");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceHealthReportDto", b =>
                {
                    b.Property<Guid?>("ServiceHealthReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EnvironmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HealthStatusTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceHealthReportId");

                    b.HasIndex("AssetId");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("HealthStatusTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceHealthReport");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceQueueDto", b =>
                {
                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QueueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConsumer")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId", "QueueId");

                    b.HasIndex("QueueId");

                    b.ToTable("ServiceQueue");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceTypeDto", b =>
                {
                    b.Property<Guid?>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.VirtualHostDto", b =>
                {
                    b.Property<Guid?>("VirtualHostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EnvironmentId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("QueueProviderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VirtualHostId");

                    b.HasIndex("QueueProviderDetailId");

                    b.ToTable("VirtualHost");
                });

            modelBuilder.Entity("EnvironmentDtoVirtualHostDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.EnvironmentDto", null)
                        .WithMany()
                        .HasForeignKey("EnvironmentsEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.VirtualHostDto", null)
                        .WithMany()
                        .HasForeignKey("VirtualHostsVirtualHostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AlertHistoryDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.AlertProfileDto", "AlertProfile")
                        .WithMany("AlertHistories")
                        .HasForeignKey("AlertProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ServiceHealthReportDto", "ServiceHealthReport")
                        .WithMany("AlertHistories")
                        .HasForeignKey("ServiceHealthReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertProfile");

                    b.Navigation("ServiceHealthReport");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AlertProfileDetailDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.AlertProfileDto", "AlertProfile")
                        .WithMany("AlertProfileDetails")
                        .HasForeignKey("AlertProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ContactDto", "Contact")
                        .WithMany("AlertProfileDetails")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertProfile");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AssetDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.AssetTypeDto", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ConnectionProfileDto", "ConnectionProfile")
                        .WithMany("Assets")
                        .HasForeignKey("ConnectionProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetType");

                    b.Navigation("ConnectionProfile");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ContactDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.ContactTypeDto", "ContactType")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceRequestDetailDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.AssetDto", "Asset")
                        .WithMany("MaintenanceRequestDetails")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.EnvironmentDto", "Environment")
                        .WithMany("MaintenanceRequestDetails")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.MaintenanceRequestDto", "MaintenanceRequest")
                        .WithMany("MaintenanceRequestDetails")
                        .HasForeignKey("MaintenanceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ServiceDto", "Service")
                        .WithMany("MaintenanceRequestDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Environment");

                    b.Navigation("MaintenanceRequest");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceRequestDetailHistoryDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.MaintenanceRequestDetailDto", "MaintenanceRequestDetail")
                        .WithMany("MaintenanceRequestDetailHistories")
                        .HasForeignKey("MaintenanceRequestDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceRequestDetail");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceTemplateDetailDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.EnvironmentDto", "Environment")
                        .WithMany("MaintenanceTemplateDetails")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.MaintenanceTemplateDto", "MaintenanceTemplate")
                        .WithMany("MaintenanceTemplateDetails")
                        .HasForeignKey("MaintenanceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ServiceDto", "Service")
                        .WithMany("MaintenanceTemplateDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("MaintenanceTemplate");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.EnvironmentDto", "Environment")
                        .WithMany("Queues")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.QueueProviderDetailDto", "QueueProviderDetail")
                        .WithMany("Queues")
                        .HasForeignKey("QueueProviderDetailId");

                    b.HasOne("Stratosphere.Data.Models.VirtualHostDto", "VirtualHost")
                        .WithMany("Queues")
                        .HasForeignKey("VirtualHostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("QueueProviderDetail");

                    b.Navigation("VirtualHost");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueProviderDetailDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.QueueProviderDto", "QueueProvider")
                        .WithMany("QueueProviderDetails")
                        .HasForeignKey("QueueProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueProvider");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueProviderDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.ConnectionProfileDto", "ConnectionProfile")
                        .WithMany("QueueProviders")
                        .HasForeignKey("ConnectionProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectionProfile");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueSnapshotDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.QueueDto", "Queue")
                        .WithMany("QueueSnapshots")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceAlertDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.AlertProfileDto", "AlertProfile")
                        .WithMany("ServiceAlerts")
                        .HasForeignKey("AlertProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.EnvironmentDto", "Environment")
                        .WithMany("ServiceAlerts")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ServiceDto", "Service")
                        .WithMany("ServiceAlerts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlertProfile");

                    b.Navigation("Environment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceAssetDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.AssetDto", "Asset")
                        .WithMany("ServiceAssets")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.EnvironmentDto", "Environment")
                        .WithMany("ServiceAssets")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ServiceDto", "Service")
                        .WithMany("ServiceAssets")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Environment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.ServiceTypeDto", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceEnvironmentDetailDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.EnvironmentDto", "Environment")
                        .WithMany("ServiceEnvironmentDetails")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.HealthStatusTypeDto", "HealthStatusType")
                        .WithMany("ServiceEnvironmentDetails")
                        .HasForeignKey("HealthStatusTypeId");

                    b.HasOne("Stratosphere.Data.Models.ServiceDto", "Service")
                        .WithMany("ServiceEnvironmentDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("HealthStatusType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceHealthReportDetailDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.ServiceHealthReportDto", "ServiceHealthReport")
                        .WithMany("ServiceHealthReportDetails")
                        .HasForeignKey("ServiceHealthReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceHealthReport");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceHealthReportDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.AssetDto", "Asset")
                        .WithMany("ServiceHealthReports")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.EnvironmentDto", "Environment")
                        .WithMany("ServiceHealthReports")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.HealthStatusTypeDto", "HealthStatusType")
                        .WithMany("ServiceHealthReports")
                        .HasForeignKey("HealthStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ServiceDto", "Service")
                        .WithMany("ServiceHealthReports")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Environment");

                    b.Navigation("HealthStatusType");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceQueueDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.QueueDto", "Queue")
                        .WithMany("ServiceQueues")
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stratosphere.Data.Models.ServiceDto", "Service")
                        .WithMany("ServiceQueues")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.VirtualHostDto", b =>
                {
                    b.HasOne("Stratosphere.Data.Models.QueueProviderDetailDto", "QueueProviderDetail")
                        .WithMany("VirtualHosts")
                        .HasForeignKey("QueueProviderDetailId");

                    b.Navigation("QueueProviderDetail");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AlertProfileDto", b =>
                {
                    b.Navigation("AlertHistories");

                    b.Navigation("AlertProfileDetails");

                    b.Navigation("ServiceAlerts");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AssetDto", b =>
                {
                    b.Navigation("MaintenanceRequestDetails");

                    b.Navigation("ServiceAssets");

                    b.Navigation("ServiceHealthReports");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.AssetTypeDto", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ConnectionProfileDto", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("QueueProviders");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ContactDto", b =>
                {
                    b.Navigation("AlertProfileDetails");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ContactTypeDto", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.EnvironmentDto", b =>
                {
                    b.Navigation("MaintenanceRequestDetails");

                    b.Navigation("MaintenanceTemplateDetails");

                    b.Navigation("Queues");

                    b.Navigation("ServiceAlerts");

                    b.Navigation("ServiceAssets");

                    b.Navigation("ServiceEnvironmentDetails");

                    b.Navigation("ServiceHealthReports");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.HealthStatusTypeDto", b =>
                {
                    b.Navigation("ServiceEnvironmentDetails");

                    b.Navigation("ServiceHealthReports");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceRequestDetailDto", b =>
                {
                    b.Navigation("MaintenanceRequestDetailHistories");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceRequestDto", b =>
                {
                    b.Navigation("MaintenanceRequestDetails");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.MaintenanceTemplateDto", b =>
                {
                    b.Navigation("MaintenanceTemplateDetails");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueDto", b =>
                {
                    b.Navigation("QueueSnapshots");

                    b.Navigation("ServiceQueues");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueProviderDetailDto", b =>
                {
                    b.Navigation("Queues");

                    b.Navigation("VirtualHosts");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.QueueProviderDto", b =>
                {
                    b.Navigation("QueueProviderDetails");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceDto", b =>
                {
                    b.Navigation("MaintenanceRequestDetails");

                    b.Navigation("MaintenanceTemplateDetails");

                    b.Navigation("ServiceAlerts");

                    b.Navigation("ServiceAssets");

                    b.Navigation("ServiceEnvironmentDetails");

                    b.Navigation("ServiceHealthReports");

                    b.Navigation("ServiceQueues");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceHealthReportDto", b =>
                {
                    b.Navigation("AlertHistories");

                    b.Navigation("ServiceHealthReportDetails");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.ServiceTypeDto", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Stratosphere.Data.Models.VirtualHostDto", b =>
                {
                    b.Navigation("Queues");
                });
#pragma warning restore 612, 618
        }
    }
}
